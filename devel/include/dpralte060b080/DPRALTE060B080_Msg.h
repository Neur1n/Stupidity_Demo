// Generated by gencpp from file dpralte060b080/DPRALTE060B080_Msg.msg
// DO NOT EDIT!


#ifndef DPRALTE060B080_MESSAGE_DPRALTE060B080_MSG_H
#define DPRALTE060B080_MESSAGE_DPRALTE060B080_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dpralte060b080
{
template <class ContainerAllocator>
struct DPRALTE060B080_Msg_
{
  typedef DPRALTE060B080_Msg_<ContainerAllocator> Type;

  DPRALTE060B080_Msg_()
    : velocity_left(0)
    , velocity_right(0)
    , odometry_left(0)
    , odometry_right(0)  {
    }
  DPRALTE060B080_Msg_(const ContainerAllocator& _alloc)
    : velocity_left(0)
    , velocity_right(0)
    , odometry_left(0)
    , odometry_right(0)  {
  (void)_alloc;
    }



   typedef int32_t _velocity_left_type;
  _velocity_left_type velocity_left;

   typedef int32_t _velocity_right_type;
  _velocity_right_type velocity_right;

   typedef int32_t _odometry_left_type;
  _odometry_left_type odometry_left;

   typedef int32_t _odometry_right_type;
  _odometry_right_type odometry_right;




  typedef boost::shared_ptr< ::dpralte060b080::DPRALTE060B080_Msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dpralte060b080::DPRALTE060B080_Msg_<ContainerAllocator> const> ConstPtr;

}; // struct DPRALTE060B080_Msg_

typedef ::dpralte060b080::DPRALTE060B080_Msg_<std::allocator<void> > DPRALTE060B080_Msg;

typedef boost::shared_ptr< ::dpralte060b080::DPRALTE060B080_Msg > DPRALTE060B080_MsgPtr;
typedef boost::shared_ptr< ::dpralte060b080::DPRALTE060B080_Msg const> DPRALTE060B080_MsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dpralte060b080::DPRALTE060B080_Msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dpralte060b080::DPRALTE060B080_Msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace dpralte060b080

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'dpralte060b080': ['/home/jihang/Documents/IGV_ws/src/dpralte060b080/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::dpralte060b080::DPRALTE060B080_Msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dpralte060b080::DPRALTE060B080_Msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dpralte060b080::DPRALTE060B080_Msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dpralte060b080::DPRALTE060B080_Msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dpralte060b080::DPRALTE060B080_Msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dpralte060b080::DPRALTE060B080_Msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dpralte060b080::DPRALTE060B080_Msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9eb137a7320166026bceb0b1a0be23c5";
  }

  static const char* value(const ::dpralte060b080::DPRALTE060B080_Msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9eb137a732016602ULL;
  static const uint64_t static_value2 = 0x6bceb0b1a0be23c5ULL;
};

template<class ContainerAllocator>
struct DataType< ::dpralte060b080::DPRALTE060B080_Msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dpralte060b080/DPRALTE060B080_Msg";
  }

  static const char* value(const ::dpralte060b080::DPRALTE060B080_Msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dpralte060b080::DPRALTE060B080_Msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32   velocity_left\n\
int32   velocity_right\n\
int32   odometry_left\n\
int32   odometry_right\n\
";
  }

  static const char* value(const ::dpralte060b080::DPRALTE060B080_Msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dpralte060b080::DPRALTE060B080_Msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.velocity_left);
      stream.next(m.velocity_right);
      stream.next(m.odometry_left);
      stream.next(m.odometry_right);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DPRALTE060B080_Msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dpralte060b080::DPRALTE060B080_Msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dpralte060b080::DPRALTE060B080_Msg_<ContainerAllocator>& v)
  {
    s << indent << "velocity_left: ";
    Printer<int32_t>::stream(s, indent + "  ", v.velocity_left);
    s << indent << "velocity_right: ";
    Printer<int32_t>::stream(s, indent + "  ", v.velocity_right);
    s << indent << "odometry_left: ";
    Printer<int32_t>::stream(s, indent + "  ", v.odometry_left);
    s << indent << "odometry_right: ";
    Printer<int32_t>::stream(s, indent + "  ", v.odometry_right);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DPRALTE060B080_MESSAGE_DPRALTE060B080_MSG_H
