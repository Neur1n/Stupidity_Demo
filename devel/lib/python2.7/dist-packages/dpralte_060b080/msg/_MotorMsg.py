# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from dpralte_060b080/MotorMsg.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class MotorMsg(genpy.Message):
  _md5sum = "573ac09c62ced905ea0ef9140f527951"
  _type = "dpralte_060b080/MotorMsg"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32   velocity_left
int32   velocity_right
char[12] ConfigurationSignal
char[14] VelocitySignal
"""
  __slots__ = ['velocity_left','velocity_right','ConfigurationSignal','VelocitySignal']
  _slot_types = ['int32','int32','char[12]','char[14]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       velocity_left,velocity_right,ConfigurationSignal,VelocitySignal

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MotorMsg, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.velocity_left is None:
        self.velocity_left = 0
      if self.velocity_right is None:
        self.velocity_right = 0
      if self.ConfigurationSignal is None:
        self.ConfigurationSignal = chr(0)*12
      if self.VelocitySignal is None:
        self.VelocitySignal = chr(0)*14
    else:
      self.velocity_left = 0
      self.velocity_right = 0
      self.ConfigurationSignal = chr(0)*12
      self.VelocitySignal = chr(0)*14

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2i.pack(_x.velocity_left, _x.velocity_right))
      _x = self.ConfigurationSignal
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_struct_12B.pack(*_x))
      else:
        buff.write(_struct_12s.pack(_x))
      _x = self.VelocitySignal
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_struct_14B.pack(*_x))
      else:
        buff.write(_struct_14s.pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.velocity_left, _x.velocity_right,) = _struct_2i.unpack(str[start:end])
      start = end
      end += 12
      self.ConfigurationSignal = str[start:end]
      start = end
      end += 14
      self.VelocitySignal = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2i.pack(_x.velocity_left, _x.velocity_right))
      _x = self.ConfigurationSignal
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_struct_12B.pack(*_x))
      else:
        buff.write(_struct_12s.pack(_x))
      _x = self.VelocitySignal
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_struct_14B.pack(*_x))
      else:
        buff.write(_struct_14s.pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.velocity_left, _x.velocity_right,) = _struct_2i.unpack(str[start:end])
      start = end
      end += 12
      self.ConfigurationSignal = str[start:end]
      start = end
      end += 14
      self.VelocitySignal = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_12B = struct.Struct("<12B")
_struct_12s = struct.Struct("<12s")
_struct_14B = struct.Struct("<14B")
_struct_2i = struct.Struct("<2i")
_struct_14s = struct.Struct("<14s")
